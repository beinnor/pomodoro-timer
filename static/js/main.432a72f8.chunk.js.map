{"version":3,"sources":["assets/alarm-sound.mp3","assets/alarm-sound.ogg","assets/captions.vtt","components/app/header/Header.jsx","components/app/footer/Footer.jsx","components/button/Button.jsx","utils/pomodoroStates.js","components/timerConfig/TimerConfig.jsx","components/timerDisplay/TimerDisplay.jsx","components/timerStart/TimerStart.jsx","components/timerReset/TimerReset.jsx","components/soundConfig/SoundConfig.jsx","utils/timerStates.js","components/app/App.jsx","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","Footer","href","Button","_ref","id","name","value","isDisabled","buttonClick","className","disabled","type","onClick","defaultProps","SESSION","BREAK","TimerConfig","handleDecrementTime","_this$props","_this","props","pomodoroState","sessionTime","setTimeState","newTime","updateTimesValidations","handleIncrementTime","_this$props2","pomodoroStates","currentTimeLeft","breakTime","toMM","secs","minutes","Math","floor","concat","_this$props3","this","buttonsDisabled","charAt","toUpperCase","slice","button_Button","React","Component","TimerDisplay","label","timeLeft","Fragment","seconds","toString","padStart","toMMSS","TimerStart","TimerReset","SoundConfig","sound","setSound","htmlFor","checked","onChange","PAUSED","RUNNING","defaultSessionTime","defaultBreakTime","defaultCurrentTimeLeft","defaultPomodoroState","defaultTimerState","timerStates","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","startTimer","timer","setInterval","setState","state","timerFinished","stopTimer","clearInterval","obj","_this$state","audioBeep","play","handleStartButton","_this$state2","timerState","startButtonValue","handleReset","pause","currentTime","audioRef","createRef","_this2","_this$state3","soundOn","header_Header","timerDisplay_TimerDisplay","components_timerConfig_TimerConfig","timerStart_TimerStart","timerReset_TimerReset","soundConfig_SoundConfig","preload","ref","audio","src","oggfile","mp3file","kind","default","srcLang","captionfile","footer_Footer","ReactDOM","render","components_app_App","document","getElementById"],"mappings":"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","file":"static/js/main.432a72f8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/alarm-sound.1cd6ea46.mp3\";","module.exports = __webpack_public_path__ + \"static/media/alarm-sound.fed2ed0b.ogg\";","module.exports = __webpack_public_path__ + \"static/media/captions.dce4e024.vtt\";","import React from 'react';\nimport './Header.css';\n\nfunction Header() {\n  return (\n    <header>\n      <h1>Pomodoro timer</h1>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport './Footer.css';\n\nfunction Footer() {\n  return (\n    <footer>\n      by\n      <a href=\"http://beinnor.github.io/\"> Beinnor </a>\n      2019\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Button.css';\n\nfunction Button({ id, name, value, isDisabled, buttonClick }) {\n  return (\n    <button className={name} id={id} disabled={isDisabled} type=\"button\" onClick={buttonClick}>\n      {value}\n    </button>\n  );\n}\n\nButton.defaultProps = {\n  name: 'button',\n  isDisabled: false\n};\n\nButton.propTypes = {\n  id: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  buttonClick: PropTypes.func.isRequired,\n  name: PropTypes.string,\n  isDisabled: PropTypes.bool\n};\n\nexport default Button;\n","export const SESSION = 1;\nexport const BREAK = 2;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TimerConfig.css';\nimport Button from '../button';\nimport * as pomodoroStates from '../../utils/pomodoroStates';\n\nclass TimerConfig extends React.Component {\n  handleDecrementTime = () => {\n    const { name, pomodoroState, sessionTime, setTimeState } = this.props;\n    if (sessionTime > 60) {\n      const newTime = sessionTime - 60;\n      return this.updateTimesValidations(name, newTime, pomodoroState, setTimeState);\n    }\n    return false;\n  };\n\n  handleIncrementTime = () => {\n    const { name, pomodoroState, sessionTime, setTimeState } = this.props;\n    if (sessionTime < 3600) {\n      const newTime = sessionTime + 60;\n      return this.updateTimesValidations(name, newTime, pomodoroState, setTimeState);\n    }\n    return false;\n  };\n\n  updateTimesValidations = (name, newTime, pomodoroState, setTimeState) => {\n    if (name === 'session') {\n      if (pomodoroState === pomodoroStates.SESSION) {\n        return setTimeState({ sessionTime: newTime, currentTimeLeft: newTime });\n      }\n      return setTimeState({ sessionTime: newTime });\n    }\n    if (name === 'break') {\n      if (pomodoroState === pomodoroStates.BREAK) {\n        return setTimeState({ breakTime: newTime, currentTimeLeft: newTime });\n      }\n      return setTimeState({ breakTime: newTime });\n    }\n    return false;\n  };\n\n  toMM = secs => {\n    const minutes = Math.floor(secs / 60);\n    return `${minutes}`;\n  };\n\n  render() {\n    const { name, sessionTime, buttonsDisabled } = this.props;\n\n    return (\n      <div className=\"config\" id={`${name}Config`}>\n        <div className=\"configLabel\" id={`${name}-label`}>\n          {`${name.charAt(0).toUpperCase() + name.slice(1)} Length`}\n        </div>\n        <Button\n          name=\"configMinusButton\"\n          id={`${name}-decrement`}\n          value=\"-\"\n          isDisabled={buttonsDisabled}\n          buttonClick={this.handleDecrementTime}\n        />\n        <span className=\"configLength\" id={`${name}-length`}>\n          {this.toMM(sessionTime)}\n        </span>\n        <Button\n          name=\"configPlusButton\"\n          id={`${name}-increment`}\n          value=\"+\"\n          isDisabled={buttonsDisabled}\n          buttonClick={this.handleIncrementTime}\n        />\n      </div>\n    );\n  }\n}\n\nTimerConfig.propTypes = {\n  name: PropTypes.string.isRequired,\n  setTimeState: PropTypes.func.isRequired,\n  pomodoroState: PropTypes.number.isRequired,\n  sessionTime: PropTypes.number.isRequired,\n  buttonsDisabled: PropTypes.bool.isRequired\n};\n\nexport default TimerConfig;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TimerDisplay.css';\nimport * as pomodoroStates from '../../utils/pomodoroStates';\n\nfunction TimerDisplay({ pomodoroState, timeLeft }) {\n  let label;\n\n  switch (pomodoroState) {\n    case pomodoroStates.SESSION:\n      label = 'Session';\n      break;\n    case pomodoroStates.BREAK:\n      label = 'Break';\n      break;\n    default:\n      label = 'Session';\n      break;\n  }\n\n  const toMMSS = secs => {\n    let minutes;\n    let seconds;\n\n    if (secs === 3600) {\n      minutes = 60;\n      seconds = 0;\n    } else {\n      minutes = Math.floor(secs / 60) % 60;\n      seconds = secs % 60;\n    }\n\n    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <>\n      <div id=\"timer-label\">{label}</div>\n      <div id=\"time-left\">{toMMSS(timeLeft)}</div>\n    </>\n  );\n}\n\nTimerDisplay.propTypes = {\n  pomodoroState: PropTypes.number.isRequired,\n  timeLeft: PropTypes.number.isRequired\n};\n\nexport default TimerDisplay;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '../button';\nimport './TimerStart.css';\n\nfunction TimerStart({ buttonClick, value }) {\n  return <Button id=\"start_stop\" value={value} buttonClick={buttonClick} />;\n}\n\nTimerStart.propTypes = {\n  buttonClick: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired\n};\n\nexport default TimerStart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '../button';\nimport './TimerReset.css';\n\nfunction TimerReset({ buttonClick }) {\n  return <Button id=\"reset\" value=\"Reset\" isDisabled={false} buttonClick={buttonClick} />;\n}\n\nTimerReset.propTypes = {\n  buttonClick: PropTypes.func.isRequired\n};\n\nexport default TimerReset;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './SoundConfig.css';\n\nfunction SoundConfig({ sound, setSound }) {\n  const toggleSound = () => {\n    if (sound === true) {\n      setSound(false);\n    } else {\n      setSound(true);\n    }\n  };\n\n  return (\n    <div id=\"SoundConfig\">\n      <label htmlFor=\"switch\">\n        Sound:\n        <div className=\"switch\">\n          <input type=\"checkbox\" id=\"switch\" checked={sound} onChange={toggleSound} />\n          <span className=\"slider\" />\n        </div>\n      </label>\n    </div>\n  );\n}\n\nSoundConfig.propTypes = {\n  sound: PropTypes.bool.isRequired,\n  setSound: PropTypes.func.isRequired\n};\n\nexport default SoundConfig;\n","export const PAUSED = 1;\nexport const RUNNING = 2;\n","import React from 'react';\nimport './App.css';\nimport Header from './header';\nimport Footer from './footer';\nimport TimerConfig from '../timerConfig';\nimport TimerDisplay from '../timerDisplay';\nimport TimerStart from '../timerStart';\nimport TimerReset from '../timerReset';\nimport SoundConfig from '../soundConfig';\nimport mp3file from '../../assets/alarm-sound.mp3';\nimport oggfile from '../../assets/alarm-sound.ogg';\nimport captionfile from '../../assets/captions.vtt';\nimport * as pomodoroStates from '../../utils/pomodoroStates';\nimport * as timerStates from '../../utils/timerStates';\n\nconst defaultSessionTime = 25 * 60;\nconst defaultBreakTime = 5 * 60;\nconst defaultCurrentTimeLeft = defaultSessionTime;\nconst defaultPomodoroState = pomodoroStates.SESSION;\nconst defaultTimerState = timerStates.PAUSED;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.audioRef = React.createRef();\n    this.state = {\n      currentTimeLeft: defaultCurrentTimeLeft,\n      sessionTime: defaultSessionTime,\n      breakTime: defaultBreakTime,\n      pomodoroState: defaultPomodoroState,\n      timerState: defaultTimerState,\n      buttonsDisabled: false,\n      sound: true,\n      startButtonValue: 'Start'\n    };\n  }\n\n  startTimer = () => {\n    this.timer = setInterval(() => {\n      this.setState(({ currentTimeLeft }) => ({\n        currentTimeLeft: currentTimeLeft - 1\n      }));\n      const { currentTimeLeft } = this.state;\n      if (currentTimeLeft < 0) {\n        this.timerFinished();\n      }\n    }, 1000);\n  };\n\n  stopTimer = () => {\n    clearInterval(this.timer);\n  };\n\n  setTimeState = obj => {\n    this.setState(obj);\n  };\n\n  timerFinished = () => {\n    const { sessionTime, breakTime, pomodoroState, sound } = this.state;\n    if (sound) {\n      this.audioBeep.play();\n    }\n    this.stopTimer();\n    if (pomodoroState === pomodoroStates.SESSION) {\n      this.setState({ pomodoroState: pomodoroStates.BREAK, currentTimeLeft: breakTime });\n      this.startTimer();\n      return;\n    }\n    if (pomodoroState === pomodoroStates.BREAK) {\n      this.setState({ pomodoroState: pomodoroStates.SESSION, currentTimeLeft: sessionTime });\n      this.startTimer();\n    }\n  };\n\n  handleStartButton = () => {\n    const { timerState, currentTimeLeft } = this.state;\n\n    if (timerState === timerStates.PAUSED) {\n      this.setState({\n        timerState: timerStates.RUNNING,\n        buttonsDisabled: true,\n        startButtonValue: 'Stop'\n      });\n      this.startTimer();\n    }\n\n    if (timerState === timerStates.RUNNING) {\n      this.setState({\n        timerState: timerStates.PAUSED,\n        buttonsDisabled: false,\n        startButtonValue: 'Start',\n        currentTimeLeft\n      });\n      this.stopTimer();\n    }\n  };\n\n  handleReset = () => {\n    this.stopTimer();\n    this.setState({\n      currentTimeLeft: defaultCurrentTimeLeft,\n      sessionTime: defaultSessionTime,\n      breakTime: defaultBreakTime,\n      pomodoroState: pomodoroStates.SESSION,\n      timerState: timerStates.PAUSED,\n      buttonsDisabled: false,\n      sound: true,\n      startButtonValue: 'Start'\n    });\n    this.audioBeep.pause();\n    this.audioBeep.currentTime = 0;\n  };\n\n  render() {\n    const {\n      pomodoroState,\n      currentTimeLeft,\n      sessionTime,\n      breakTime,\n      sound: soundOn,\n      startButtonValue,\n      buttonsDisabled\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <Header />\n\n        <TimerDisplay pomodoroState={pomodoroState} timeLeft={currentTimeLeft} />\n        <TimerConfig\n          name=\"session\"\n          pomodoroState={pomodoroState}\n          sessionTime={sessionTime}\n          buttonsDisabled={buttonsDisabled}\n          setTimeState={this.setTimeState}\n        />\n        <TimerConfig\n          name=\"break\"\n          pomodoroState={pomodoroState}\n          sessionTime={breakTime}\n          buttonsDisabled={buttonsDisabled}\n          setTimeState={this.setTimeState}\n        />\n        <TimerStart buttonClick={this.handleStartButton} value={startButtonValue} />\n        <TimerReset buttonClick={this.handleReset} />\n        <SoundConfig\n          sound={soundOn}\n          setSound={sound => {\n            this.setState({ sound });\n          }}\n        />\n        <audio\n          id=\"beep\"\n          preload=\"auto\"\n          ref={audio => {\n            this.audioBeep = audio;\n          }}\n        >\n          <source src={oggfile} type=\"audio/ogg\" />\n          <source src={mp3file} type=\"audio/mpeg\" />\n          <track kind=\"captions\" default srcLang=\"en\" src={captionfile} />\n        </audio>\n\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}